From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: mcchampions <1309635304@qq.com>
Date: Sat, 31 Aug 2024 19:16:12 +0800
Subject: [PATCH] use static class


diff --git a/src/main/java/com/destroystokyo/paper/profile/CraftPlayerProfile.java b/src/main/java/com/destroystokyo/paper/profile/CraftPlayerProfile.java
index daa157eaa021d039f9a092bea0b78f7c1f746e3b..20abf410896324b3f12ce4aea0c6ddc1818d1ab5 100644
--- a/src/main/java/com/destroystokyo/paper/profile/CraftPlayerProfile.java
+++ b/src/main/java/com/destroystokyo/paper/profile/CraftPlayerProfile.java
@@ -383,7 +383,7 @@ public class CraftPlayerProfile implements PlayerProfile, SharedPlayerProfile {
             return o instanceof ProfileProperty && profile.getProperties().containsKey(((ProfileProperty) o).getName());
         }
 
-        private class ProfilePropertyIterator implements Iterator<ProfileProperty> {
+        private static class ProfilePropertyIterator implements Iterator<ProfileProperty> {
             private final Iterator<Property> iterator;
 
             ProfilePropertyIterator(Iterator<Property> iterator) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/Fox.java b/src/main/java/net/minecraft/world/entity/animal/Fox.java
index a8c54a3dcba027b3fb013b143c3f77d0b635fcdb..f10afcca209323e4435e3564885b171339c0155f 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Fox.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Fox.java
@@ -241,7 +241,7 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
         this.goalSelector.addGoal(6, new Fox.SeekShelterGoal(1.25D));
         this.goalSelector.addGoal(7, new Fox.FoxMeleeAttackGoal(1.2000000476837158D, true));
         this.goalSelector.addGoal(7, new Fox.SleepGoal());
-        this.goalSelector.addGoal(8, new Fox.FoxFollowParentGoal(this, 1.25D));
+        this.goalSelector.addGoal(8, new FoxFollowParentGoal(this, 1.25D));
         this.goalSelector.addGoal(9, new Fox.FoxStrollThroughVillageGoal(32, 200));
         this.goalSelector.addGoal(10, new Fox.FoxEatBerriesGoal(1.2000000476837158D, 12, 1));
         this.goalSelector.addGoal(10, new LeapAtTargetGoal(this, 0.4F));
@@ -1312,7 +1312,7 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
         }
     }
 
-    private class FoxFollowParentGoal extends FollowParentGoal {
+    private static class FoxFollowParentGoal extends FollowParentGoal {
 
         private final Fox fox;
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/Phantom.java b/src/main/java/net/minecraft/world/entity/monster/Phantom.java
index 44a24707530ca46a6a42e8a4d9049e75f65aa66b..ab57a35b9c882a45072ac8a8faea7da51e507e0a 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Phantom.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Phantom.java
@@ -60,7 +60,7 @@ public class Phantom extends FlyingMob implements Enemy {
         this.attackPhase = Phantom.AttackPhase.CIRCLE;
         this.xpReward = 5;
         this.moveControl = new Phantom.PhantomMoveControl(this);
-        this.lookControl = new Phantom.PhantomLookControl(this);
+        this.lookControl = new PhantomLookControl(this);
         this.setShouldBurnInDay(true); // Purpur
     }
 
@@ -450,7 +450,7 @@ public class Phantom extends FlyingMob implements Enemy {
         }
     }
 
-    class OrbitCrystalGoal extends Goal {
+    static class OrbitCrystalGoal extends Goal {
         private final Phantom phantom;
         private float offset;
         private float radius;
@@ -580,7 +580,7 @@ public class Phantom extends FlyingMob implements Enemy {
         }
     }
 
-    private class PhantomLookControl extends org.purpurmc.purpur.controller.LookControllerWASD { // Purpur
+    private static class PhantomLookControl extends org.purpurmc.purpur.controller.LookControllerWASD { // Purpur
 
         public PhantomLookControl(Mob entity) {
             super(entity);
diff --git a/src/main/java/net/minecraft/world/entity/monster/Pillager.java b/src/main/java/net/minecraft/world/entity/monster/Pillager.java
index 60202b4414f85272dc5b8537e9535510e7c35b1f..7c20ab8aae5ea5866a9d2f342d3cc1a4c63d4341 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Pillager.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Pillager.java
@@ -62,49 +62,49 @@ public class Pillager extends AbstractIllager implements CrossbowAttackMob, Inve
         super(type, world);
     }
 
-    // Purpur start
-    @Override
-    public boolean isRidable() {
-        return level().purpurConfig.pillagerRidable;
-    }
-
-    @Override
-    public boolean dismountsUnderwater() {
-        return level().purpurConfig.useDismountsUnderwaterTag ? super.dismountsUnderwater() : !level().purpurConfig.pillagerRidableInWater;
-    }
-
-    @Override
-    public boolean isControllable() {
-        return level().purpurConfig.pillagerControllable;
-    }
-    // Purpur end
-
-    @Override
-    public void initAttributes() {
-        this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(this.level().purpurConfig.pillagerMaxHealth);
-    }
-
-    @Override
-    public boolean isSensitiveToWater() {
-        return this.level().purpurConfig.pillagerTakeDamageFromWater;
-    }
-
-    @Override
-    protected boolean isAlwaysExperienceDropper() {
-        return this.level().purpurConfig.pillagerAlwaysDropExp;
-    }
-
+    // Purpur start
+    @Override
+    public boolean isRidable() {
+        return level().purpurConfig.pillagerRidable;
+    }
+
+    @Override
+    public boolean dismountsUnderwater() {
+        return level().purpurConfig.useDismountsUnderwaterTag ? super.dismountsUnderwater() : !level().purpurConfig.pillagerRidableInWater;
+    }
+
+    @Override
+    public boolean isControllable() {
+        return level().purpurConfig.pillagerControllable;
+    }
+    // Purpur end
+
+    @Override
+    public void initAttributes() {
+        this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(this.level().purpurConfig.pillagerMaxHealth);
+    }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level().purpurConfig.pillagerTakeDamageFromWater;
+    }
+
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.pillagerAlwaysDropExp;
+    }
+
     @Override
     protected void registerGoals() {
         super.registerGoals();
         this.goalSelector.addGoal(0, new FloatGoal(this));
-        this.goalSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
-        this.goalSelector.addGoal(2, new Raider.HoldGroundAttackGoal(this, 10.0F));
+        this.goalSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
+        this.goalSelector.addGoal(2, new HoldGroundAttackGoal(this, 10.0F));
         this.goalSelector.addGoal(3, new RangedCrossbowAttackGoal<>(this, 1.0D, 8.0F));
         this.goalSelector.addGoal(8, new RandomStrollGoal(this, 0.6D));
         this.goalSelector.addGoal(9, new LookAtPlayerGoal(this, Player.class, 15.0F, 1.0F));
         this.goalSelector.addGoal(10, new LookAtPlayerGoal(this, Mob.class, 15.0F));
-        this.targetSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
+        this.targetSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
         this.targetSelector.addGoal(1, (new HurtByTargetGoal(this, Raider.class)).setAlertOthers());
         this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(this, Player.class, true));
         this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, AbstractVillager.class, false));
diff --git a/src/main/java/net/minecraft/world/entity/monster/Vindicator.java b/src/main/java/net/minecraft/world/entity/monster/Vindicator.java
index a8be8b1a29d9bd09e467f47bbe2941a4bc96cdaa..91af32c47578bb6836d410ca697fc7cee06573c8 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Vindicator.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Vindicator.java
@@ -58,48 +58,48 @@ public class Vindicator extends AbstractIllager {
         super(type, world);
     }
 
-    // Purpur start
-    @Override
-    public boolean isRidable() {
-        return level().purpurConfig.vindicatorRidable;
-    }
-
-    @Override
-    public boolean dismountsUnderwater() {
-        return level().purpurConfig.useDismountsUnderwaterTag ? super.dismountsUnderwater() : !level().purpurConfig.vindicatorRidableInWater;
-    }
-
-    @Override
-    public boolean isControllable() {
-        return level().purpurConfig.vindicatorControllable;
-    }
-    // Purpur end
-
-    @Override
-    public void initAttributes() {
-        this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(this.level().purpurConfig.vindicatorMaxHealth);
-    }
-
-    @Override
-    public boolean isSensitiveToWater() {
-        return this.level().purpurConfig.vindicatorTakeDamageFromWater;
-    }
-
-    @Override
-    protected boolean isAlwaysExperienceDropper() {
-        return this.level().purpurConfig.vindicatorAlwaysDropExp;
-    }
-
+    // Purpur start
+    @Override
+    public boolean isRidable() {
+        return level().purpurConfig.vindicatorRidable;
+    }
+
+    @Override
+    public boolean dismountsUnderwater() {
+        return level().purpurConfig.useDismountsUnderwaterTag ? super.dismountsUnderwater() : !level().purpurConfig.vindicatorRidableInWater;
+    }
+
+    @Override
+    public boolean isControllable() {
+        return level().purpurConfig.vindicatorControllable;
+    }
+    // Purpur end
+
+    @Override
+    public void initAttributes() {
+        this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(this.level().purpurConfig.vindicatorMaxHealth);
+    }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level().purpurConfig.vindicatorTakeDamageFromWater;
+    }
+
+    @Override
+    protected boolean isAlwaysExperienceDropper() {
+        return this.level().purpurConfig.vindicatorAlwaysDropExp;
+    }
+
     @Override
     protected void registerGoals() {
         super.registerGoals();
         this.goalSelector.addGoal(0, new FloatGoal(this));
-        this.goalSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
+        this.goalSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
         this.goalSelector.addGoal(1, new Vindicator.VindicatorBreakDoorGoal(this));
         this.goalSelector.addGoal(2, new AbstractIllager.RaiderOpenDoorGoal(this));
-        this.goalSelector.addGoal(3, new Raider.HoldGroundAttackGoal(this, 10.0F));
+        this.goalSelector.addGoal(3, new HoldGroundAttackGoal(this, 10.0F));
         this.goalSelector.addGoal(4, new MeleeAttackGoal(this, 1.0D, false));
-        this.targetSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
+        this.targetSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
         this.targetSelector.addGoal(1, (new HurtByTargetGoal(this, Raider.class)).setAlertOthers());
         this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(this, Player.class, true));
         this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, AbstractVillager.class, true));
@@ -164,12 +164,12 @@ public class Vindicator extends AbstractIllager {
         RandomSource randomSource = world.getRandom();
         this.populateDefaultEquipmentSlots(randomSource, difficulty);
         this.populateDefaultEquipmentEnchantments(randomSource, difficulty);
-        // Purpur start
-        Level level = world.getMinecraftWorld();
-        if (level().purpurConfig.vindicatorJohnnySpawnChance > 0D && random.nextDouble() <= level().purpurConfig.vindicatorJohnnySpawnChance) {
-            setCustomName(Component.translatable("Johnny"));
-        }
-        // Purpur end
+        // Purpur start
+        Level level = world.getMinecraftWorld();
+        if (level().purpurConfig.vindicatorJohnnySpawnChance > 0D && random.nextDouble() <= level().purpurConfig.vindicatorJohnnySpawnChance) {
+            setCustomName(Component.translatable("Johnny"));
+        }
+        // Purpur end
         return spawnGroupData;
     }
 
@@ -237,7 +237,7 @@ public class Vindicator extends AbstractIllager {
 
     static class VindicatorBreakDoorGoal extends BreakDoorGoal {
         public VindicatorBreakDoorGoal(Mob mob) {
-            super(mob, 6, com.google.common.base.Predicates.in(mob.level().paperConfig().entities.behavior.doorBreakingDifficulty.getOrDefault(mob.getType(), mob.level().paperConfig().entities.behavior.doorBreakingDifficulty.get(EntityType.VINDICATOR)))); // Paper - Configurable door breaking difficulty
+            super(mob, 6, com.google.common.base.Predicates.in(mob.level().paperConfig().entities.behavior.doorBreakingDifficulty.getOrDefault(mob.getType(), mob.level().paperConfig().entities.behavior.doorBreakingDifficulty.get(EntityType.VINDICATOR)))); // Paper - Configurable door breaking difficulty
             this.setFlags(EnumSet.of(Goal.Flag.MOVE));
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/raid/Raider.java b/src/main/java/net/minecraft/world/entity/raid/Raider.java
index 8e8bbf3a4e6dddb8d702859529b860e584e62e70..5e0fa82ce0066c96a36b6a3de880068e334a5215 100644
--- a/src/main/java/net/minecraft/world/entity/raid/Raider.java
+++ b/src/main/java/net/minecraft/world/entity/raid/Raider.java
@@ -309,7 +309,7 @@ public abstract class Raider extends PatrollingMonster {
 
     public abstract SoundEvent getCelebrateSound();
 
-    public class ObtainRaidLeaderBannerGoal<T extends Raider> extends Goal {
+    public static class ObtainRaidLeaderBannerGoal<T extends Raider> extends Goal {
 
         private final T mob;
         private static final ItemStack CACHED_OMINOUS_BANNER = Raid.getLeaderBannerInstance(); // JettPack
@@ -502,7 +502,7 @@ public abstract class Raider extends PatrollingMonster {
         }
     }
 
-    protected class HoldGroundAttackGoal extends Goal {
+    protected static class HoldGroundAttackGoal extends Goal {
 
         private final Raider mob;
         private final float hostileRadiusSqr;
diff --git a/src/main/java/net/minecraft/world/inventory/BeaconMenu.java b/src/main/java/net/minecraft/world/inventory/BeaconMenu.java
index 88842f31836df70717fdf7f77f39a2ad8bb45326..5d0866bbff99a4d13b3651450a4eb2124b0d1ce0 100644
--- a/src/main/java/net/minecraft/world/inventory/BeaconMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/BeaconMenu.java
@@ -61,7 +61,7 @@ public class BeaconMenu extends AbstractContainerMenu {
         checkContainerDataCount(propertyDelegate, 3);
         this.beaconData = propertyDelegate;
         this.access = context;
-        this.paymentSlot = new BeaconMenu.PaymentSlot(this.beacon, 0, 136, 110);
+        this.paymentSlot = new PaymentSlot(this.beacon, 0, 136, 110);
         this.addSlot(this.paymentSlot);
         this.addDataSlots(propertyDelegate);
         boolean flag = true;
@@ -207,7 +207,7 @@ public class BeaconMenu extends AbstractContainerMenu {
         return !this.beacon.getItem(0).isEmpty();
     }
 
-    private class PaymentSlot extends Slot {
+    private static class PaymentSlot extends Slot {
 
         public PaymentSlot(Container inventory, int index, int x, int y) {
             super(inventory, index, x, y);
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index 1b49ecbf8fdbe8b734f8ca5191dc9ed70aa66af7..a29e798dbba478a62c998f42c0e20d416a77a69f 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -1119,7 +1119,7 @@ public class LevelChunk extends ChunkAccess {
         private EntityCreationType() {}
     }
 
-    private class RebindableTickingBlockEntityWrapper implements TickingBlockEntity {
+    private static class RebindableTickingBlockEntityWrapper implements TickingBlockEntity {
 
         private TickingBlockEntity ticker;
 
diff --git a/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java b/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java
index a2e195f6f1d8b92e800ae3491f011ad07c984c44..985ded47f7812f9f547f5d5560cb5900f73e10ea 100644
--- a/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java
+++ b/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java
@@ -215,7 +215,7 @@ public class CraftBossBar implements BossBar {
         }
     }
 
-    private final class FlagContainer {
+    private static final class FlagContainer {
 
         private Supplier<Boolean> get;
         private Consumer<Boolean> set;
diff --git a/src/main/java/org/bukkit/craftbukkit/help/SimpleHelpMap.java b/src/main/java/org/bukkit/craftbukkit/help/SimpleHelpMap.java
index 05d3aecd4abaab6a94effcb1ab35c1b82410865f..ccffb95c2f238edb163ce7a10d3e73ffbe820ba6 100644
--- a/src/main/java/org/bukkit/craftbukkit/help/SimpleHelpMap.java
+++ b/src/main/java/org/bukkit/craftbukkit/help/SimpleHelpMap.java
@@ -228,7 +228,7 @@ public class SimpleHelpMap implements HelpMap {
         this.topicFactoryMap.put(commandClass, factory);
     }
 
-    private class IsCommandTopicPredicate implements Predicate<HelpTopic> {
+    private static class IsCommandTopicPredicate implements Predicate<HelpTopic> {
 
         @Override
         public boolean apply(HelpTopic topic) {
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/DeprecatedItemMetaCustomValueTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/DeprecatedItemMetaCustomValueTest.java
index 0f3cae51971d62731dce80540b66e57a7f7ffee9..b292b0ad2d6aa9535a94aba06b58107d2b8435ae 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/DeprecatedItemMetaCustomValueTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/DeprecatedItemMetaCustomValueTest.java
@@ -210,7 +210,7 @@ public class DeprecatedItemMetaCustomValueTest extends AbstractTestingBase {
                 .getCustomTag(DeprecatedItemMetaCustomValueTest.VALID_KEY, ItemTagType.LONG).longValue());
     }
 
-    class UUIDItemTagType implements ItemTagType<byte[], UUID> {
+    static class UUIDItemTagType implements ItemTagType<byte[], UUID> {
 
         @Override
         public Class<byte[]> getPrimitiveType() {
@@ -284,7 +284,7 @@ public class DeprecatedItemMetaCustomValueTest extends AbstractTestingBase {
         assertFalse(meta.getCustomTagContainer().hasCustomTag(tagKey, type));
     }
 
-    class PrimitiveTagType<T> implements ItemTagType<T, T> {
+    static class PrimitiveTagType<T> implements ItemTagType<T, T> {
 
         private final Class<T> primitiveType;
 
