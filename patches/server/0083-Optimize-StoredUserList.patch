From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: mcchampions <1309635304@qq.com>
Date: Sat, 31 Aug 2024 16:26:31 +0800
Subject: [PATCH] Optimize StoredUserList


diff --git a/src/main/java/net/minecraft/server/players/StoredUserList.java b/src/main/java/net/minecraft/server/players/StoredUserList.java
index d57f19409b5b7e4d81a6bb3748824695fdbe7dc5..bfc3cf7c61f1c0c4b0bc0ca1bba98dc30ae85f65 100644
--- a/src/main/java/net/minecraft/server/players/StoredUserList.java
+++ b/src/main/java/net/minecraft/server/players/StoredUserList.java
@@ -1,7 +1,6 @@
 // mc-dev import
 package net.minecraft.server.players;
 
-import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.io.Files;
 import com.google.gson.Gson;
@@ -17,12 +16,9 @@ import java.io.IOException;
 import java.nio.charset.StandardCharsets;
 import java.util.Collection;
 import java.util.Iterator;
-import java.util.List;
 import java.util.Map;
-import java.util.Objects;
-import java.util.stream.Stream;
 import javax.annotation.Nullable;
-import net.minecraft.Util;
+
 import net.minecraft.util.GsonHelper;
 import org.slf4j.Logger;
 
@@ -80,7 +76,7 @@ public abstract class StoredUserList<K, V extends StoredUserEntry<K>> {
     }
 
     public String[] getUserList() {
-        return (String[]) this.map.keySet().toArray(me.titaniumtown.Constants.EMPTY_string_arr); // JettPack
+        return this.map.keySet().toArray(me.titaniumtown.Constants.EMPTY_string_arr); // JettPack
     }
 
     public boolean isEmpty() {
@@ -107,50 +103,45 @@ public abstract class StoredUserList<K, V extends StoredUserEntry<K>> {
 
     public void save() throws IOException {
         Runnable runnable = () -> { // Akarin - Save json list async
-        this.removeExpired(); // Paper - remove expired values before saving
-        JsonArray jsonarray = new JsonArray();
-        // Yatopia start - Stop wasting resources on JsonList#get
-        /*Stream<JsonObject> stream = this.map.values().stream().map((jsonlistentry) -> { // CraftBukkit - decompile error
-            JsonObject jsonobject = new JsonObject();
-
-            Objects.requireNonNull(jsonlistentry);
-            return (JsonObject) Util.make(jsonobject, jsonlistentry::serialize);
-        });
-
-        Objects.requireNonNull(jsonarray);
-        stream.forEach(jsonarray::add);*/
-        for (V value : this.map.values()) {
-            JsonObject obj = new JsonObject();
-            value.serialize(obj);
-            jsonarray.add(obj);
-        }
-        // Yatopia end
-        try {
-        BufferedWriter bufferedwriter = Files.newWriter(this.file, StandardCharsets.UTF_8);
+            this.removeExpired(); // Paper - remove expired values before saving
+            JsonArray jsonarray = new JsonArray();
+            // Yatopia start - Stop wasting resources on JsonList#get
+            /*Stream<JsonObject> stream = this.map.values().stream().map((jsonlistentry) -> { // CraftBukkit - decompile error
+                JsonObject jsonobject = new JsonObject();
+
+                Objects.requireNonNull(jsonlistentry);
+                return (JsonObject) Util.make(jsonobject, jsonlistentry::serialize);
+            });
+
+            Objects.requireNonNull(jsonarray);
+            stream.forEach(jsonarray::add);*/
+            for (V value : this.map.values()) {
+                JsonObject obj = new JsonObject();
+                value.serialize(obj);
+                jsonarray.add(obj);
+            }
+            // Yatopia end
+            try {
+                BufferedWriter bufferedwriter = Files.newWriter(this.file, StandardCharsets.UTF_8);
 
-        try {
-            StoredUserList.GSON.toJson(jsonarray, bufferedwriter);
-        } catch (Throwable throwable) {
-            if (bufferedwriter != null) {
                 try {
-                    bufferedwriter.close();
-                } catch (Throwable throwable1) {
+                    StoredUserList.GSON.toJson(jsonarray, bufferedwriter);
+                } catch (Throwable throwable) {
+                    try {
+                        bufferedwriter.close();
+                    } catch (Throwable throwable1) {
                     throwable.addSuppressed(throwable1);
                 }
-            }
 
-            throw throwable;
-        }
+                throw throwable;
+            }
 
-        if (bufferedwriter != null) {
             bufferedwriter.close();
-        }
-        } catch (IOException e) {
-            StoredUserList.LOGGER.warn("Failed to async save " + this.file, e); // Akarin - Save json list async
-        }
+            } catch (IOException e) {
+                StoredUserList.LOGGER.warn("Failed to async save " + this.file, e); // Akarin - Save json list async
+            }
         }; // Akarin - Save json list async
         io.papermc.paper.util.MCUtil.scheduleAsyncTask(runnable); // Akarin - Save json list async
-
     }
 
     public void load() throws IOException {
@@ -161,16 +152,16 @@ public abstract class StoredUserList<K, V extends StoredUserEntry<K>> {
             {
                 try {
                     this.map.clear();
-                    JsonArray jsonarray = (JsonArray) StoredUserList.GSON.fromJson(bufferedreader, JsonArray.class);
+                    JsonArray jsonarray = StoredUserList.GSON.fromJson(bufferedreader, JsonArray.class);
 
                     if (jsonarray == null) {
                         break label54;
                     }
 
-                    Iterator iterator = jsonarray.iterator();
+                    Iterator<JsonElement> iterator = jsonarray.iterator();
 
                     while (iterator.hasNext()) {
-                        JsonElement jsonelement = (JsonElement) iterator.next();
+                        JsonElement jsonelement = iterator.next();
                         JsonObject jsonobject = GsonHelper.convertToJsonObject(jsonelement, "entry");
                         StoredUserEntry<K> jsonlistentry = this.createEntry(jsonobject);
 
@@ -179,36 +170,28 @@ public abstract class StoredUserList<K, V extends StoredUserEntry<K>> {
                         }
                     }
                 // Spigot Start
-                } catch ( com.google.gson.JsonParseException | NullPointerException ex )
-                {
+                } catch ( com.google.gson.JsonParseException | NullPointerException ex ) {
                     org.bukkit.Bukkit.getLogger().log( java.util.logging.Level.WARNING, "Unable to read file " + this.file + ", backing it up to {0}.backup and creating new copy.", ex );
                     File backup = new File( this.file + ".backup" );
                     this.file.renameTo( backup );
                     this.file.delete();
                 // Spigot End
                 } catch (Throwable throwable) {
-                    if (bufferedreader != null) {
-                        try {
-                            bufferedreader.close();
-                        } catch (Throwable throwable1) {
-                            throwable.addSuppressed(throwable1);
-                        }
+                    try {
+                        bufferedreader.close();
+                    } catch (Throwable throwable1) {
+                        throwable.addSuppressed(throwable1);
                     }
 
                     throw throwable;
                 }
 
-                if (bufferedreader != null) {
-                    bufferedreader.close();
-                }
+                bufferedreader.close();
 
                 return;
             }
 
-            if (bufferedreader != null) {
-                bufferedreader.close();
-            }
-
+            bufferedreader.close();
         }
     }
 }
